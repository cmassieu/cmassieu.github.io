{"version":3,"sources":["components/FileUploader.js","pages/forms/FileUpload.js","components/PageTitle.js"],"names":["FileUploader","props","handleAcceptedFiles","files","allFiles","showPreview","map","file","Object","assign","preview","split","URL","createObjectURL","formattedSize","formatBytes","size","state","selectedFiles","push","setState","onFileUpload","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","bind","Fragment","onDrop","acceptedFiles","this","getRootProps","getInputProps","className","id","f","key","data-dz-thumbnail","alt","name","src","type","to","Component","defaultProps","FileUpload","breadCrumbItems","label","path","active","title","console","PageTitle","item","index"],"mappings":"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","file":"static/js/107.14da600b.chunk.js","sourcesContent":["// @flow\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card } from 'reactstrap';\nimport Dropzone from 'react-dropzone';\nimport PropTypes from 'prop-types';\n\ntype FileUploaderProps = {\n    onFileUpload?: PropTypes.func,\n    showPreview?: boolean,\n};\n\ntype FileUploaderState = {\n    selectedFiles: Array<PropTypes.object>,\n};\n\nclass FileUploader extends Component<FileUploaderProps, FileUploaderState> {\n    static defaultProps = {\n        showPreview: true,\n    };\n\n    constructor(props: FileUploaderProps) {\n        super(props);\n        this.handleAcceptedFiles = this.handleAcceptedFiles.bind(this);\n\n        this.state = {\n            selectedFiles: [],\n        };\n    }\n\n    /**\n     * Handled the accepted files and shows the preview\n     */\n    handleAcceptedFiles = (files: Array<PropTypes.object>) => {\n        var allFiles = files;\n\n        if (this.props.showPreview) {\n            files.map(file =>\n                Object.assign(file, {\n                    preview: file['type'].split('/')[0] === 'image' ? URL.createObjectURL(file) : null,\n                    formattedSize: this.formatBytes(file.size),\n                })\n            );\n\n            allFiles = this.state.selectedFiles;\n            allFiles.push(...files);\n            this.setState({ selectedFiles: allFiles });\n        }\n\n        if (this.props.onFileUpload) this.props.onFileUpload(allFiles);\n    };\n\n    /**\n     * Formats the size\n     */\n    formatBytes = (bytes: number, decimals: number = 2) => {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const dm = decimals < 0 ? 0 : decimals;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Dropzone onDrop={acceptedFiles => this.handleAcceptedFiles(acceptedFiles)} {...this.props}>\n                    {({ getRootProps, getInputProps }) => (\n                        <div className=\"dropzone\">\n                            <div className=\"dz-message needsclick\" {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <i className=\"h1 text-muted dripicons-cloud-upload\"></i>\n                                <h5>Drop files here or click to upload.</h5>\n                                <span className=\"text-muted font-13\">\n                                    (This is just a demo dropzone. Selected files are <strong>not</strong> actually\n                                    uploaded.)\n                                </span>\n                            </div>\n                        </div>\n                    )}\n                </Dropzone>\n\n                {this.props.showPreview && (\n                    <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\n                        {this.state.selectedFiles.map((f, i) => {\n                            return (\n                                <Card\n                                    className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\n                                    key={i + '-file'}>\n                                    <div className=\"p-2\">\n                                        <Row className=\"align-items-center\">\n                                            {f.preview && (\n                                                <Col className=\"col-auto\">\n                                                    <img\n                                                        data-dz-thumbnail=\"\"\n                                                        className=\"avatar-sm rounded bg-light\"\n                                                        alt={f.name}\n                                                        src={f.preview}\n                                                    />\n                                                </Col>\n                                            )}\n                                            {!f.preview && (\n                                                <Col className=\"col-auto\">\n                                                    <div className=\"avatar-sm\">\n                                                        <span className=\"avatar-title bg-primary rounded\">\n                                                            {f.type.split('/')[0]}\n                                                        </span>\n                                                    </div>\n                                                </Col>\n                                            )}\n                                            <Col className=\"pl-0\">\n                                                <Link to=\"#\" className=\"text-muted font-weight-bold\">\n                                                    {f.name}\n                                                </Link>\n                                                <p className=\"mb-0\">\n                                                    <strong>{f.formattedSize}</strong>\n                                                </p>\n                                            </Col>\n                                        </Row>\n                                    </div>\n                                </Card>\n                            );\n                        })}\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default FileUploader;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Card, CardBody } from 'reactstrap';\n\nimport PageTitle from '../../components/PageTitle';\nimport FileUploader from '../../components/FileUploader';\n\nconst FileUpload = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Forms', path: '/forms/upload' },\n                    { label: 'Form Upload', path: '/forms/upload', active: true },\n                ]}\n                title={'Form Upload'}\n            />\n\n            <Row>\n                <Col>\n                    <Card>\n                        <CardBody>\n                            <h4 className=\"header-title mb-3\">Dropzone File Upload</h4>\n\n                            <p className=\"text-muted font-13 m-b-30\">\n                                DropzoneJS is an open source library that provides drag’n’drop file uploads with image\n                                previews.\n                            </p>\n\n                            <FileUploader\n                                onFileUpload={files => {\n                                    console.log(files);\n                                }}\n                            />\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default FileUpload;\n","// @flow\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\ntype PageTitleProps = {\n    breadCrumbItems: PropTypes.object,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb>\n                            <BreadcrumbItem>\n                                <Link to=\"/\">e-BRS</Link>\n                            </BreadcrumbItem>\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <BreadcrumbItem active key={index}>\n                                        {item.label}\n                                    </BreadcrumbItem>\n                                ) : (\n                                    <BreadcrumbItem key={index}>\n                                        <Link to={item.path}>{item.label}</Link>\n                                    </BreadcrumbItem>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}