{"version":3,"sources":["pages/uikit/Popovers.js","components/PageTitle.js"],"names":["Basic","className","id","type","color","placement","target","Direction","text","map","popover","i","Fragment","key","DimissibleOnClick","trigger","HoverPopover","Popovers","breadCrumbItems","label","path","active","title","xl","PageTitle","props","to","item","index"],"mappings":"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","file":"static/js/117.9cbb9727.chunk.js","sourcesContent":["// @flow\nimport React from 'react';\nimport { Row, Col, Card, CardBody, UncontrolledPopover, PopoverHeader, PopoverBody, Button } from 'reactstrap';\n\nimport PageTitle from '../../components/PageTitle';\n\nconst Basic = () => {\n    return (\n        <Card>\n            <CardBody>\n                <h4 className=\"header-title\">Simple Popover</h4>\n                <p className=\"text-muted font-14\">\n                    Popover is a component which displays a box with a content after a click on an element - similar to\n                    the tooltip but can contain more content.\n                </p>\n\n                <Button id=\"UncontrolledPopover\" type=\"button\" color=\"danger\">\n                    Launch Popover\n                </Button>\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover\">\n                    <PopoverHeader>Title goes here</PopoverHeader>\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\n                </UncontrolledPopover>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst Direction = () => {\n    return (\n        <Card>\n            <CardBody>\n                <h4 className=\"header-title\">Four Directions</h4>\n                <p className=\"text-muted font-14\">Four options are available: top, right, bottom, and left aligned.</p>\n\n                {[\n                    {\n                        placement: 'top',\n                        text: 'Top',\n                    },\n                    {\n                        placement: 'bottom',\n                        text: 'Bottom',\n                    },\n                    {\n                        placement: 'left',\n                        text: 'Left',\n                    },\n                    {\n                        placement: 'right',\n                        text: 'Right',\n                    },\n                ].map((popover, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <Button id={`popover-${popover.placement}`} type=\"button\" color=\"primary\" className=\"mr-1\">\n                                {popover.text}\n                            </Button>\n                            <UncontrolledPopover placement={popover.placement} target={`popover-${popover.placement}`}>\n                                <PopoverHeader>{popover.text}</PopoverHeader>\n                                <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\n                            </UncontrolledPopover>\n                        </React.Fragment>\n                    );\n                })}\n            </CardBody>\n        </Card>\n    );\n};\n\nconst DimissibleOnClick = () => {\n    return (\n        <Card>\n            <CardBody>\n                <h4 className=\"header-title\">Dismissible popover</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>legacy</code> to dismiss popovers on the\n                    user's next click of a different element than the toggle element.\n                </p>\n\n                <Button id=\"UncontrolledPopover2\" type=\"button\" color=\"primary\">\n                    Dismiss on click\n                </Button>\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover2\" trigger=\"legacy\">\n                    <PopoverHeader>Title goes here</PopoverHeader>\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\n                </UncontrolledPopover>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst HoverPopover = () => {\n    return (\n        <Card>\n            <CardBody>\n                <h4 className=\"header-title\">Hover</h4>\n                <p className=\"text-muted font-14\">\n                    Use the <code>trigger</code> attribute with value <code>hover</code> to show popover on hovering the\n                    element.\n                </p>\n\n                <Button id=\"UncontrolledPopover3\" type=\"button\" color=\"primary\">\n                    Show on hover\n                </Button>\n                <UncontrolledPopover placement=\"right\" target=\"UncontrolledPopover3\" trigger=\"hover\">\n                    <PopoverHeader>Title goes here</PopoverHeader>\n                    <PopoverBody>And here's some amazing content. It's very engaging. Right?</PopoverBody>\n                </UncontrolledPopover>\n            </CardBody>\n        </Card>\n    );\n};\n\nconst Popovers = () => {\n    return (\n        <React.Fragment>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'UI', path: '/ui/popovers' },\n                    { label: 'Base UI', path: '/ui/popovers' },\n                    { label: 'Popovers', path: '/ui/popovers', active: true },\n                ]}\n                title={'Popovers'}\n            />\n\n            <Row>\n                <Col xl={6}>\n                    <Basic />\n                </Col>\n                <Col xl={6}>\n                    <Direction />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xl={6}>\n                    <DimissibleOnClick />\n                </Col>\n                <Col xl={6}>\n                    <HoverPopover />\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n};\n\nexport default Popovers;\n","// @flow\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\ntype PageTitleProps = {\n    breadCrumbItems: PropTypes.object,\n    title: string,\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb>\n                            <BreadcrumbItem>\n                                <Link to=\"/\">e-BRS</Link>\n                            </BreadcrumbItem>\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <BreadcrumbItem active key={index}>\n                                        {item.label}\n                                    </BreadcrumbItem>\n                                ) : (\n                                    <BreadcrumbItem key={index}>\n                                        <Link to={item.path}>{item.label}</Link>\n                                    </BreadcrumbItem>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n"],"sourceRoot":""}